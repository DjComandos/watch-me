(function () {    var host = document.location.protocol + '//' + document.location.host;    $(document).ready(function(){        ticTacToeClient.connect();        $('#connect').click(function (){            ticTacToeClient.logIn($('#loginName').val());        });        $('#createGame').click(function(){            ticTacToeClient.createGame($('#gameName').val());        });        $('#gamesOnlineList').click(function (e){            var el = e.target,                gameName = $(el).attr('data-game');            if(!!gameName) {                ticTacToeClient.joinToGame(gameName);            }        });                $('#ticTacToeTable').click(function(e){            var el = $(e.target);            if(el.text() == '') {                ticTacToeClient.makeMove(el.attr('data-game-x'), el.attr('data-game-y'));            }        });        $('#anotherGame').click(function (){            $(this).hide();            ticTacToeClient.showGamesList();        });    });    var templatesBuilder = {        buildUsersList: function (data){            if(!!data && !!data.users) {                var usersList = [],                    u = data.users;                usersList.length = 1000;                for(var key in u) {                    if(u.hasOwnProperty(key)) {                        usersList.push('<tr><td>');                        usersList.push(u[key]);                        usersList.push('</td></tr>');                    }                }                $('#usersOnlineList').html(usersList.join(''));            } else {                $('#usersOnlineList').html('<tr><td>No users online</td></tr>');            }        },        buildGamesList: function (data) {            if(!!data && !!data.games) {                var gamesList = [],                    g = data.games,                    gamesCount = 0;                gamesList.length = 1000;                for(var key in g) {                    if(g.hasOwnProperty(key) && g[key].isAvailable){                        gamesCount++;                        gamesList.push('<tr data-game="');                            gamesList.push(g[key].id);                            gamesList.push('"><td data-game="');                            gamesList.push(g[key].id);                            gamesList.push('">');                        gamesList.push(g[key].user);                        gamesList.push('</td><td data-game="');                            gamesList.push(g[key].id);                            gamesList.push('">');                        gamesList.push(g[key].name);                        gamesList.push("</td></tr>");                    }                }                if(gamesCount > 0) {                    $('#gamesOnlineList').html(gamesList.join(''));                    $('.gameListContainer').show();                }            } else {                $('.gameListContainer').hide();            }        }     };    var ticTacToeClient = (function(){        var socket,            created,            gameName,            userName,            turn;                function connect() {            socket = io.connect(host);            socket.on('connect', function (){                 created = true;                console.log('connected');                                socket.on('userloggedin', function(data){                    $('.tab').hide();                    $('#username').text(data.name);                    userName = data.name;                    $('.gameCreateScreen').show();                    templatesBuilder.buildUsersList(data);                    templatesBuilder.buildGamesList(data);                });                socket.on('onLogInError', function (data){                    $('.control-group.login-group').addClass('error');                    $('.control-group.login-group .control-label').text(data.msg);                });                socket.on('usersListChanged', templatesBuilder.buildUsersList);                socket.on('gamesListChanged', templatesBuilder.buildGamesList);                socket.on('gameHosted', function (data){                    $('.tab').hide();                    $('.gameCreatedScreen').show().find('.username').text(data.game.user);                    $('.gameCreatedScreen .gameName').text(data.game.name);                });                socket.on('gameStarted', function (data){                    $('.tab').hide();                    var container = $('.gameProgressScreen');                    gameName = data.name                    container.show();                    //debugger;                    if(!data.isMaster) {                        container.find('.client').show();                        socket.on('streamsServerVideo' + gameName , function (s){                            alert('111' + s.data);                        });                                                    (function(socket, onId){                             var canvas = document.getElementById("clientOutput");                             canvas.width = 640;                             canvas.height = 460;                             var ctx = canvas.getContext("2d");                             socket.on(onId, function (data) {                              var image = new Image();                              image.src = data;                              image.onload = function() {                               ctx.drawImage(image, 0, 0);                              };                             });                            }(socket, 'streamsServerVideo' + gameName));                    } else {                        container.find('.server').show();                        VideoApp.init(socket, 'streamsServerVideo' + gameName)                    }                });                socket.on('onMove', function (data){                    turn = data.turn;                    $('#ticTacToeTable td[data-game-x="'+data.x+'"][data-game-y="'+data.y+'"]').text(data.isMaster ? 'X' : 'O');                    $('.gameProgressScreen .gameStatus').text(userName == turn ? 'your turn' : 'wait for opponent');                });                socket.on('gameOver', function (data){                    $('.gameProgressScreen .gameStatus').text(data.msg);                    $('.gameProgressScreen #anotherGame').show();                });            });        }        function logIn(userName){            if(created && !!socket) {                if(!!userName) {                    socket.emit('login', {name: userName});                }            }        }                function createGame(gameName){            if(created && !!socket) {                if(!gameName) {                    $('.control-group.create-server-group').addClass('error')                    .find('.control-label').text('Please fill in the name')                } else {                    socket.emit('createGame', {gameName: gameName});                }            }        }                function joinToGame(gameName){            if(!!gameName){                socket.emit('connectToGame', {gameName: gameName});            } else {                alert('gameName could not be empty');            }        }                function makeMove(x, y){            socket.emit('makeMove', {gameName: gameName, userName: userName, x: x, y: y});        }                function showGamesList(){            $('.tab').hide();            $('#ticTacToeTable td').text('');            $('.gameCreateScreen').show();        }    return {        connect: connect,        logIn: logIn,        createGame: createGame,        joinToGame: joinToGame,        makeMove: makeMove,        showGamesList: showGamesList    };    }());}());// hoster // Establish the connection with the server var VideoApp = {}; var host = document.location.protocol + '//' + document.location.host; // requestAnimationFrame shim (function () {  var i = 0,   lastTime = 0,   vendors = ['ms', 'moz', 'webkit', 'o'];  while (i < vendors.length && !window.requestAnimationFrame) {   window.requestAnimationFrame = window[vendors[i] + 'RequestAnimationFrame'];   i++;  }  if (!window.requestAnimationFrame) {   window.requestAnimationFrame = function (callback, element) {    var currTime = new Date().getTime(),     timeToCall = Math.max(0, 1000 / 60 - currTime + lastTime),     id = setTimeout(function () { callback(currTime + timeToCall); }, timeToCall);    lastTime = currTime + timeToCall;    return id;   };  } } ()); VideoApp = {  socket: {},  emitId: '',  start: function (stream) {   VideoApp.video.addEventListener('canplay', function () {    VideoApp.video.removeEventListener('canplay');    setTimeout(function () {     VideoApp.video.play();     VideoApp.info.style.display = 'none';     VideoApp.canvas.style.display = 'inline';     VideoApp.canvas.width = VideoApp.video.videoWidth;     VideoApp.canvas.height = VideoApp.video.videoHeight;     VideoApp.drawToCanvas();    }, 500);   }, true);   var domURL = window.URL || window.webkitURL;   VideoApp.video.src = domURL ? domURL.createObjectURL(stream) : stream;  },  denied: function () {   VideoApp.info.innerHTML = 'Camera access denied!<br>Please reload and try again.';  },  error: function (e) {   if (e) {    console.error(e);   }   VideoApp.info.innerHTML = 'Please go to about:flags in Google Chrome and enable the &quot;MediaStream&quot; flag.';  },  drawToCanvas: function () {   VideoApp.socket.emit(VideoApp.emitId, {base64Frame: VideoApp.canvas.toDataURL('image/jpeg', 0.2)});           requestAnimationFrame(VideoApp.drawToCanvas);      var video = VideoApp.video,    ctx = VideoApp.context;   ctx.drawImage(video, 0, 0, VideoApp.canvas.width, VideoApp.canvas.height);  } }; VideoApp.init = function (socket, emitId) {   VideoApp.socket = socket;   VideoApp.emitId = emitId;   VideoApp.video = document.createElement('video');   VideoApp.canvas = document.querySelector('#output');   VideoApp.canvas.style.display = 'none';   VideoApp.context = VideoApp.canvas.getContext('2d');   VideoApp.info = document.querySelector('#info');     navigator.getUserMedia_ = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;   try {    navigator.getUserMedia_({     video: true,     audio: false    }, VideoApp.start, VideoApp.denied);   } catch (e) {    try {     navigator.getUserMedia_('video', VideoApp.start, VideoApp.denied);    } catch (e) {     VideoApp.error(e);    }   }   VideoApp.video.loop = VideoApp.video.muted = true;   VideoApp.video.load();    }; VideoApp.PlayPause = function() {  VideoApp.video.paused ? VideoApp.video.play(): VideoApp.video.pause(); };